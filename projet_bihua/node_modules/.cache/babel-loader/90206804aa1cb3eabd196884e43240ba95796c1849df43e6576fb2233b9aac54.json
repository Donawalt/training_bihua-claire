{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\clair\\\\training_bihua\\\\src\\\\Image.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport logo from './image/';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrollTrigger = () => {\n  _s();\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const handleScroll = () => {\n    // Mettre à jour la position de défilement lorsqu'il y a un défilement\n    setScrollPosition(window.scrollY);\n  };\n  useEffect(() => {\n    // Ajouter le \"scroll listener\" lors du montage du composant\n    window.addEventListener('scroll', handleScroll);\n\n    // Nettoyer le \"scroll listener\" lors du démontage du composant\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  let textToShow = \"Texte par défaut\"; // Le texte par défaut avant tout changement\n\n  // Ajoutez une logique pour changer le texte en fonction de la position de défilement\n  if (scrollPosition > 500) {\n    textToShow = \"Texte 1\";\n  } else if (scrollPosition > 1000) {\n    textToShow = \"Texte 2\";\n  } else if (scrollPosition > 1500) {\n    textToShow = \"Texte 3\";\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scroll-trigger-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), \";\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-container\",\n      children: textToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrollTrigger, \"Q2iK3kJoTBUHGJF6VgTmVb/ctE4=\");\n_c = ScrollTrigger;\nexport default ScrollTrigger;\nvar _c;\n$RefreshReg$(_c, \"ScrollTrigger\");","map":{"version":3,"names":["React","useEffect","useState","logo","jsxDEV","_jsxDEV","ScrollTrigger","_s","scrollPosition","setScrollPosition","handleScroll","window","scrollY","addEventListener","removeEventListener","textToShow","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/clair/training_bihua/src/Image.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport logo from './image/'\r\n\r\nconst ScrollTrigger = () => {\r\n  const [scrollPosition, setScrollPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    // Mettre à jour la position de défilement lorsqu'il y a un défilement\r\n    setScrollPosition(window.scrollY);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Ajouter le \"scroll listener\" lors du montage du composant\r\n    window.addEventListener('scroll', handleScroll);\r\n    \r\n    // Nettoyer le \"scroll listener\" lors du démontage du composant\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    };\r\n    }, []);\r\n\r\n    let textToShow = \"Texte par défaut\"; // Le texte par défaut avant tout changement\r\n\r\n    // Ajoutez une logique pour changer le texte en fonction de la position de défilement\r\n    if (scrollPosition > 500) {\r\n        textToShow = \"Texte 1\";\r\n    } else if (scrollPosition > 1000) {\r\n        textToShow = \"Texte 2\";\r\n    } else if (scrollPosition > 1500) {\r\n        textToShow = \"Texte 3\";\r\n    }\r\n\r\n  return (\r\n    <div className=\"scroll-trigger-container\">\r\n      <div className=\"image-container\">\r\n        <img src={logo} alt=\"Logo\" />;\r\n      </div>\r\n      <div className=\"text-container\">\r\n            {textToShow}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrollTrigger;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,UAAU;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAD,iBAAiB,CAACE,MAAM,CAACC,OAAO,CAAC;EACnC,CAAC;EAEDX,SAAS,CAAC,MAAM;IACd;IACAU,MAAM,CAACE,gBAAgB,CAAC,QAAQ,EAAEH,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXC,MAAM,CAACG,mBAAmB,CAAC,QAAQ,EAAEJ,YAAY,CAAC;IACpD,CAAC;EACD,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIK,UAAU,GAAG,kBAAkB,CAAC,CAAC;;EAErC;EACA,IAAIP,cAAc,GAAG,GAAG,EAAE;IACtBO,UAAU,GAAG,SAAS;EAC1B,CAAC,MAAM,IAAIP,cAAc,GAAG,IAAI,EAAE;IAC9BO,UAAU,GAAG,SAAS;EAC1B,CAAC,MAAM,IAAIP,cAAc,GAAG,IAAI,EAAE;IAC9BO,UAAU,GAAG,SAAS;EAC1B;EAEF,oBACEV,OAAA;IAAKW,SAAS,EAAC,0BAA0B;IAAAC,QAAA,gBACvCZ,OAAA;MAAKW,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BZ,OAAA;QAAKa,GAAG,EAAEf,IAAK;QAACgB,GAAG,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,KAC/B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNlB,OAAA;MAAKW,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EACxBF;IAAU;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChB,EAAA,CAvCID,aAAa;AAAAkB,EAAA,GAAblB,aAAa;AAyCnB,eAAeA,aAAa;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}